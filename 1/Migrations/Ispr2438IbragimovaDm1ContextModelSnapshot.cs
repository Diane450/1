// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _1.Models;

#nullable disable

namespace _1.Migrations
{
    [DbContext(typeof(Ispr2438IbragimovaDm1Context))]
    partial class Ispr2438IbragimovaDm1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("_1.Models.BlackListGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GuestId" }, "FK_BlackListGuests_GuestId_idx");

                    b.ToTable("BlackListGuests");
                });

            modelBuilder.Entity("_1.Models.BlackListReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descryption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("BlackListReasons");
                });

            modelBuilder.Entity("_1.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("_1.Models.Employee", b =>
                {
                    b.Property<int>("IdEmployees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEmployees");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("Subdepartment")
                        .HasColumnType("int");

                    b.HasKey("IdEmployees")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Department" }, "FK_EmployeesDepartment_idx");

                    b.HasIndex(new[] { "Subdepartment" }, "FK_EmployeesSubdepartment_idx");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("_1.Models.Group", b =>
                {
                    b.Property<int>("IdGroups")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGroups");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdGroups")
                        .HasName("PRIMARY");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("_1.Models.GroupMeeting", b =>
                {
                    b.Property<int>("GroupMeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("date");

                    b.Property<int>("DeprtmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<int>("VisitPurposeId")
                        .HasColumnType("int");

                    b.HasKey("GroupMeetingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeprtmentId" }, "FK_DepartentGM_idx");

                    b.HasIndex(new[] { "EmployeeId" }, "FK_GMEmployee_idx");

                    b.HasIndex(new[] { "GroupId" }, "FK_GMGroup_idx");

                    b.HasIndex(new[] { "StatusId" }, "FK_GroupStatus_idx");

                    b.ToTable("GroupMeeting", (string)null);
                });

            modelBuilder.Entity("_1.Models.GroupMeetingsGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GuestId" }, "FK_GMGuests_idx");

                    b.HasIndex(new[] { "GroupMeetingId" }, "FK_UGMK_idx");

                    b.ToTable("GroupMeetingsGuest", (string)null);
                });

            modelBuilder.Entity("_1.Models.Guest", b =>
                {
                    b.Property<int>("IdGuests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGuests");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Organization")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<byte[]>("Passport")
                        .HasColumnType("longblob");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<int>("PasssportSeries")
                        .HasColumnType("int");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Phone")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IdGuests")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "FK_PGUserId_idx");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("_1.Models.MeetingStatus", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idStatus");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdStatus")
                        .HasName("PRIMARY");

                    b.ToTable("MeetingStatus", (string)null);
                });

            modelBuilder.Entity("_1.Models.PrivateMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<int>("VisitPurposeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DepartmentId" }, "FK_PMDeprtment_idx");

                    b.HasIndex(new[] { "EmployeeId" }, "FK_PrivateMEmployeeId_idx");

                    b.HasIndex(new[] { "StatusId" }, "FK_PrivateMeetingStatus_idx");

                    b.HasIndex(new[] { "VisitPurposeId" }, "FK_VisitPurposeId_idx");

                    b.ToTable("PrivateMeeting", (string)null);
                });

            modelBuilder.Entity("_1.Models.PrivateMeetingsGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("PrivateMeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PrivateMeetingId" }, "FK__idx");

                    b.HasIndex(new[] { "GuestId" }, "fk_User_idx");

                    b.ToTable("PrivateMeetingsGuests");
                });

            modelBuilder.Entity("_1.Models.Subdepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SubdepartmentName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Subdepartment", (string)null);
                });

            modelBuilder.Entity("_1.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("varchar(225)");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("_1.Models.VisitPurpose", b =>
                {
                    b.Property<int>("IdVisitPurpose")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVisitPurpose");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdVisitPurpose")
                        .HasName("PRIMARY");

                    b.ToTable("VisitPurpose", (string)null);
                });

            modelBuilder.Entity("_1.Models.BlackListGuest", b =>
                {
                    b.HasOne("_1.Models.Guest", "Guest")
                        .WithMany("BlackListGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BlackListGuests_GuestId");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("_1.Models.Employee", b =>
                {
                    b.HasOne("_1.Models.Department", "DepartmentNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Department")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_EmployeesDepartment");

                    b.HasOne("_1.Models.Subdepartment", "SubdepartmentNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Subdepartment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_EmployeesSubdepartment");

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("SubdepartmentNavigation");
                });

            modelBuilder.Entity("_1.Models.GroupMeeting", b =>
                {
                    b.HasOne("_1.Models.Department", "Deprtment")
                        .WithMany("GroupMeetings")
                        .HasForeignKey("DeprtmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_GMDepartment");

                    b.HasOne("_1.Models.Employee", "Employee")
                        .WithMany("GroupMeetings")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_GMEmployee");

                    b.HasOne("_1.Models.Group", "Group")
                        .WithMany("GroupMeetings")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GMGroup");

                    b.HasOne("_1.Models.MeetingStatus", "Status")
                        .WithMany("GroupMeetings")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_GMStatus");

                    b.Navigation("Deprtment");

                    b.Navigation("Employee");

                    b.Navigation("Group");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("_1.Models.GroupMeetingsGuest", b =>
                {
                    b.HasOne("_1.Models.GroupMeeting", "GroupMeeting")
                        .WithMany("GroupMeetingsGuests")
                        .HasForeignKey("GroupMeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_UGMK");

                    b.HasOne("_1.Models.Guest", "Guest")
                        .WithMany("GroupMeetingsGuests")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("FK_GMGuests");

                    b.Navigation("GroupMeeting");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("_1.Models.Guest", b =>
                {
                    b.HasOne("_1.Models.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_PGUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_1.Models.PrivateMeeting", b =>
                {
                    b.HasOne("_1.Models.Department", "Department")
                        .WithMany("PrivateMeetings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PMDepartment");

                    b.HasOne("_1.Models.Employee", "Employee")
                        .WithMany("PrivateMeetings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PrivateMEmployeeId");

                    b.HasOne("_1.Models.MeetingStatus", "Status")
                        .WithMany("PrivateMeetings")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PrivateStatus");

                    b.HasOne("_1.Models.VisitPurpose", "VisitPurpose")
                        .WithMany("PrivateMeetings")
                        .HasForeignKey("VisitPurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_VisitPurposeId");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Status");

                    b.Navigation("VisitPurpose");
                });

            modelBuilder.Entity("_1.Models.PrivateMeetingsGuest", b =>
                {
                    b.HasOne("_1.Models.Guest", "Guest")
                        .WithMany("PrivateMeetingsGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_GuestsPrivate");

                    b.HasOne("_1.Models.PrivateMeeting", "PrivateMeeting")
                        .WithMany("PrivateMeetingsGuests")
                        .HasForeignKey("PrivateMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UPM");

                    b.Navigation("Guest");

                    b.Navigation("PrivateMeeting");
                });

            modelBuilder.Entity("_1.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("GroupMeetings");

                    b.Navigation("PrivateMeetings");
                });

            modelBuilder.Entity("_1.Models.Employee", b =>
                {
                    b.Navigation("GroupMeetings");

                    b.Navigation("PrivateMeetings");
                });

            modelBuilder.Entity("_1.Models.Group", b =>
                {
                    b.Navigation("GroupMeetings");
                });

            modelBuilder.Entity("_1.Models.GroupMeeting", b =>
                {
                    b.Navigation("GroupMeetingsGuests");
                });

            modelBuilder.Entity("_1.Models.Guest", b =>
                {
                    b.Navigation("BlackListGuests");

                    b.Navigation("GroupMeetingsGuests");

                    b.Navigation("PrivateMeetingsGuests");
                });

            modelBuilder.Entity("_1.Models.MeetingStatus", b =>
                {
                    b.Navigation("GroupMeetings");

                    b.Navigation("PrivateMeetings");
                });

            modelBuilder.Entity("_1.Models.PrivateMeeting", b =>
                {
                    b.Navigation("PrivateMeetingsGuests");
                });

            modelBuilder.Entity("_1.Models.Subdepartment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("_1.Models.User", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("_1.Models.VisitPurpose", b =>
                {
                    b.Navigation("PrivateMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
